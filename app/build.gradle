plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.dam.bookcita"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BC75_GOOGLE_API_KEY", "\"" + getGoogleApiKey() + "\"")
            buildConfigField("String", "BC75_FIREBASE_STORAGE_TOKEN", "\"" + getFBStorageToken() + "\"")

        }

        debug {
            buildConfigField("String", "BC75_GOOGLE_API_KEY", "\"" + getGoogleApiKey() + "\"")
            buildConfigField("String", "BC75_FIREBASE_STORAGE_TOKEN", "\"" + getFBStorageToken() + "\"")
        }
//        android.buildTypes.each {
//            it.buildConfigField 'String', 'GOOGLE_BC75_API_KEY', "\"$System.env.GOOGLE_BC75_API_KEY\""
//        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getGoogleApiKey() {
    // au préalable : avoir créé une variable d'environnement utilisateur BC75_GOOGLE_API_KEY avec comme valeur la clé en question (et un redémarrage est nécessaire)
    def googleApiKey = System.getenv("BC75_GOOGLE_API_KEY")
    return googleApiKey
}

def getFBStorageToken() {
    // au préalable : avoir créé une variable d'environnement utilisateur BC75_GOOGLE_API_KEY avec comme valeur la clé en question (et un redémarrage est nécessaire)
    def fBStorageToken = System.getenv("BC75_FIREBASE_STORAGE_TOKEN")
    return fBStorageToken
}




dependencies {

    // les dependencies pour gerer la bd Firebase
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.firebase:firebase-firestore:24.1.2'
    implementation 'com.google.firebase:firebase-storage:20.0.1'
    implementation 'com.google.firebase:firebase-auth:21.0.5'
    implementation 'com.google.firebase:firebase-database:20.0.5'
    implementation 'com.firebaseui:firebase-ui-auth:8.0.1'
    implementation 'com.firebaseui:firebase-ui:8.0.1'



    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // Pour utiliser Jackson pour parser en JSO
    // Pour utiliser CameraX
    def cameraxVersion = "1.0.0-alpha02"
    implementation "androidx.camera:camera-core:${cameraxVersion}"
    implementation "androidx.camera:camera-camera2:${cameraxVersion}"

    // Pour ML Kit
    implementation 'com.google.mlkit:barcode-scanning:17.0.2'

    // Pour utiliser Jackson pour parser en JSON
    // Pour utiliser Jackson pour parser en JSO
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.3'


    // Pour ML Kit (Barcode)
    implementation 'com.google.mlkit:barcode-scanning:17.0.2'

    // Pour ML Kit (OCR)
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:18.0.0'

    // Round image pour afficher l'image dans un rond (il est possible d'utiliser Glide pour le faire aussi)
    implementation 'com.mikhaellopez:circularimageview:3.0.2'

    // Pour meilisearch
    implementation 'com.meilisearch.sdk:meilisearch-java:0.7.2'


}